#!/bin/bash
# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FreeMarket
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: source scripts/quick_commands.sh
# –∏–ª–∏: bash scripts/quick_commands.sh <command>

PROJECT_DIR="/opt/freemarket"
COMPOSE_FILE="docker-compose.prod.yml"

cd "$PROJECT_DIR" || exit 1

case "$1" in
    "start")
        echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f "$COMPOSE_FILE" up -d
        ;;
    "stop")
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f "$COMPOSE_FILE" down
        ;;
    "restart")
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f "$COMPOSE_FILE" restart
        ;;
    "logs")
        echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        docker compose -f "$COMPOSE_FILE" logs -f "${2:-}"
        ;;
    "status")
        echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker compose -f "$COMPOSE_FILE" ps
        ;;
    "health")
        echo "üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
        echo "Backend: $(curl -s http://localhost:8000/health || echo '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')"
        echo "API —á–µ—Ä–µ–∑ Nginx: $(curl -s http://localhost/api/health || echo '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')"
        echo "Frontend: $(curl -s -o /dev/null -w '%{http_code}' http://localhost/ || echo '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')"
        ;;
    "update")
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
        git pull
        docker compose -f "$COMPOSE_FILE" build --no-cache
        docker compose -f "$COMPOSE_FILE" up -d
        docker compose -f "$COMPOSE_FILE" exec -T backend alembic upgrade head
        echo "‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        ;;
    "backup")
        echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
        bash scripts/backup_db.sh
        ;;
    "shell-backend")
        echo "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É backend..."
        docker compose -f "$COMPOSE_FILE" exec backend bash
        ;;
    "shell-postgres")
        echo "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É postgres..."
        docker compose -f "$COMPOSE_FILE" exec postgres psql -U assistadmin_pg -d assistance_kz
        ;;
    "clean")
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Docker..."
        docker system prune -a --volumes
        ;;
    *)
        echo "FreeMarket - –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash scripts/quick_commands.sh <command>"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start         - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  stop          - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  restart       - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  logs [service] - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å)"
        echo "  status        - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  health        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  update        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        echo "  backup        - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î"
        echo "  shell-backend - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É backend"
        echo "  shell-postgres - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É postgres"
        echo "  clean         - –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Docker"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  bash scripts/quick_commands.sh start"
        echo "  bash scripts/quick_commands.sh logs backend"
        echo "  bash scripts/quick_commands.sh update"
        ;;
esac

