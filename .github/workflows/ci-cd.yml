name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  # Run backend checks only if a backend folder exists
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check backend presence
      run: |
        if [ ! -d "backend" ]; then
          echo "No backend directory found, skipping backend checks";
          exit 0;
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Backend checks (conditional)
      run: |
        if [ ! -d "backend" ]; then
          echo "No backend directory found, skipping backend checks";
          exit 0;
        fi
        python -V
        cd backend
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -c "import importlib; importlib.import_module('main'); print('Backend imports successfully')"

  # Run frontend checks only if a package.json exists in src
  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check frontend presence
      run: |
        if [ ! -f "src/package.json" ]; then
          echo "No frontend package.json found, skipping frontend checks";
          exit 0;
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/package-lock.json

    - name: Install dependencies
      working-directory: ./src
      run: |
        if [ -f package-lock.json ]; then
          npm ci;
        else
          npm install;
        fi

    - name: Run tests (if script exists)
      working-directory: ./src
      run: |
        if grep -q '"test"[[:space:]]*:' package.json; then
          npm test -- --coverage --watchAll=false;
        else
          echo "No npm test script found, skipping tests";
        fi

    - name: Build (if script exists)
      working-directory: ./src
      run: |
        if grep -q '"build"[[:space:]]*:' package.json; then
          npm run build;
        else
          echo "No npm build script found, skipping build";
        fi
  # No build/deploy here: server is started by the admin remotely
